<input
  type="text"
  className="search-bar-input"
  value={this.state.search}
  placeholder="Anywhere &middot; Homes"
  onChange={this.handleUpdate}
  onKeyPress={this.handleSubmit}
/>


import React from "react";
import { connect } from "react-redux";
import { updateFilter } from "../actions/filter_actions";
import { withRouter } from "react-router";
import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';

class SearchBar extends React.Component {
  constructor(props) {
    super(props);
    this.state = { search: "" };
    this.handleUpdate = this.handleUpdate.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleClear = this.handleClear.bind(this);
  }

  handleUpdate(value) {
    this.setState({ search: value });
  }

  handleClear(e) {
    this.setState({ search: "" });
  }

  handleSubmit(address, placeId) {
    // debugger
    // e.preventDefault();
    // if (e.key !== "Enter") {
    //   return;
    // }
    this.setState({search: address});
    const geocoder = new google.maps.Geocoder();
    // const address = e.target.value;
    // debugger;

    geocoder.geocode({ address: address }, (results, status) => {
      if (status == google.maps.GeocoderStatus.OK) {
        const lat = results[0].geometry.location.lat();
        const lng = results[0].geometry.location.lng();
        this.props.history.push(`/homes?lat=${lat}&lng=${lng}`);
      }
    });
  }

  render() {
    let closer;
    let className = "search-bar";
    if (this.state.search.length > 0) {
      closer = (
        <div className="closer" onClick={this.handleClear}>
          x
        </div>
      );
    }

    const inputProps = {
      value: this.state.search,
      placeholder: "Anywhere &middot; Homes",
      onChange: this.handleUpdate,
    };

    return (
      <div className={className} onSubmit={this.handleSubmit}>
        <div className="magnifying-glass-div">
          <i className="material-icons magnifying-glass">search</i>
        </div>
        <PlacesAutocomplete classNames={{input: "search-bar-input", root: "autocomplete"}} inputProps={inputProps} onSelect={this.handleSubmit}/>

        {closer}
      </div>
    );
  }
}

const mapDispatchToProps = dispatch => ({
  updateFilter: (filter, value) => dispatch(updateFilter(filter, value))
});

export default withRouter(connect(null, mapDispatchToProps)(SearchBar));
